<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetNinja.NotifyPropertyChanged</name>
    </assembly>
    <members>
        <member name="M:DotNetNinja.NotifyPropertyChanged.ExpressionExtensions.ExtractPropertyName``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Extracts property name from Expression if its body is MemberExpression, otherwise throws ArgumentException.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNinja.NotifyPropertyChanged.PropertyChangedNotifier">
            <summary>
            Base class for objects that notify properties changes.
            </summary>
        </member>
        <member name="E:DotNetNinja.NotifyPropertyChanged.PropertyChangedNotifier.PropertyChanged">
            <summary>
            Event indicating that a property is changed on a component.
            </summary>
        </member>
        <member name="M:DotNetNinja.NotifyPropertyChanged.PropertyChangedNotifier.OnPropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:DotNetNinja.NotifyPropertyChanged.PropertyChangedNotifier.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets value of property and raises PropertyChanged event if the property has changed.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="backingField">Field that backs target property.</param>
            <param name="value">Target value.</param>
            <param name="propertyExpression">Expression describing property.</param>
            <returns>Value indicating whether property value has changed (therefore PropertyChanged was raised).</returns>
        </member>
        <member name="M:DotNetNinja.NotifyPropertyChanged.PropertyChangedNotifier.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets value of property and raises PropertyChanged event if the property has changed.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="backingField">Field that backs target property.</param>
            <param name="value">Target value.</param>
            <param name="propName">Property name.</param>
            <returns>Value indicating whether property value has changed (therefore PropertyChanged was raised).</returns>
        </member>
    </members>
</doc>
