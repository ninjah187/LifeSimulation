<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetNinja.TypeFiltering</name>
    </assembly>
    <members>
        <member name="T:DotNetNinja.TypeFiltering.ITypeFiltering">
            <summary>
            Abstraction for executing actions depending on object type.
            </summary>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.When``1(System.Action{``0})">
            <summary>
            Executes action when object is of specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="what"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.BreakIfRecognized">
            <summary>
            Prevents further checks if previous type was succesfully recognized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.Default(System.Action)">
            <summary>
            Executes action when not even one type was recognized.
            </summary>
            <param name="what"></param>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.Default(System.Action{System.Object})">
            <summary>
            Executes action when not even one type was recognized.
            </summary>
            <param name="what"></param>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.ThrowIfNotRecognized">
            <summary>
            Throws InvalidOperationException if not even one type was recognized.
            </summary>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFiltering.ThrowIfNotRecognized(System.String)">
            <summary>
            Throws InvalidOperationException if not even one type was recognized.
            </summary>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ITypeFilteringControl.Break">
            <summary>
            Prevents further checks.
            </summary>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ObjectExtensions.When``1(System.Object,System.Action{``0})">
            <summary>
            Executes action if object is of specific type and starts ITypeFiltering methods chain.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="what"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNinja.TypeFiltering.ObjectExtensions.When``1(System.Object,System.Action{``0,DotNetNinja.TypeFiltering.ITypeFilteringControl})">
            <summary>
            Executes action if object is of specific type and starts ITypeFiltering methods chain.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="what"></param>
            <returns></returns>
        </member>
    </members>
</doc>
